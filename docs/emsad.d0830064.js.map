{"version":3,"sources":["js/emsad.js"],"names":["window","addEventListener","loading","document","querySelector","body","navBtn","navIcon","navPanel","topBtn","sections","querySelectorAll","animElem","navToggle","classList","toggle","style","opacity","setTimeout","remove","overflow","add","scrollTop","documentElement","e","clickedElement","target","contains","parentNode","callback","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","sectionId","id","navLink","root","rootMargin","threshold","item","observe"],"mappings":";AAAAA,OAAOC,iBAAiB,OAAQ,WAC1BC,IAAAA,EAAUC,SAASC,cAAc,YACjCC,EAAOF,SAASC,cAAc,QAG9BE,EAASH,SAASC,cAAc,WAChCG,EAAUJ,SAASC,cAAc,YACjCI,EAAWL,SAASC,cAAc,aAClCK,EAASN,SAASC,cAAc,WAGhCM,EAAWP,SAASQ,iBAAiB,YAErCC,EAAWT,SAASQ,iBAAiB,YAmBhCE,SAAAA,IACPL,EAASM,UAAUC,OAAO,WAC1BR,EAAQO,UAAUC,OAAO,eAlB3BZ,SAASC,cAAc,kBAAkBY,MAAMC,QAAU,IACzDjB,OAAOkB,WAAW,WAChBhB,EAAQY,UAAUK,OAAO,WACzBd,EAAKW,MAAMI,SAAW,QACrB,KAGHd,EAAOQ,UAAUO,IAAI,cAGrBZ,EAAOR,iBAAiB,QAAS,WAC/BE,SAASE,KAAKiB,UAAY,EAC1BnB,SAASoB,gBAAgBD,UAAY,IASvCnB,SAASF,iBAAiB,QAAS,SAACuB,GAC9BC,IAAAA,EAAiBD,EAAEE,OACnBlB,GAAAA,EAASM,UAAUa,SAAS,WAC9Bd,SAEG,EAAA,CACGY,GAAAA,GAAkBnB,EAEpB,YADAO,IAIFY,EAAiBA,EAAeG,iBACzBH,KAKTI,IAyCAC,EAAW,IAAIC,qBAzCJ,SAACC,EAASF,GACvBE,EAAQC,QAAQ,SAACC,GAEX,GAACA,EAAMR,OAAOZ,UAAUa,SAAS,WAuBjCO,EAAMC,gBACND,EAAMR,OAAOZ,UAAUa,SAAS,YAEhCO,EAAMR,OAAOZ,UAAUO,IAAI,iBA1BkB,CAC3Ce,IAAAA,EAAYF,EAAMR,OAAOW,GAGzBC,EAAUnC,SAASC,cACCgC,sBAAAA,OAAAA,EADxB,OAKIF,EAAMC,gBACRG,EAAQxB,UAAUO,IAAI,UAGL,SAAbe,EACF3B,EAAOK,UAAUO,IAAI,cAErBZ,EAAOK,UAAUK,OAAO,eAG1BmB,EAAQxB,UAAUK,OAAO,cAanB,CACZoB,KAAM,KACNC,WAAY,OACZC,UAAW,IAMb/B,EAASuB,QAAQ,SAACS,GAChBZ,EAASa,QAAQD,KAEnB9B,EAASqB,QAAQ,SAACS,GAChBZ,EAASa,QAAQD","file":"emsad.d0830064.js","sourceRoot":"..\\src","sourcesContent":["window.addEventListener(\"load\", () => {\r\n  let loading = document.querySelector(\".loading\");\r\n  let body = document.querySelector(\"body\");\r\n\r\n  // GET ALL NAVBAR ELEMENTS\r\n  let navBtn = document.querySelector(\"#navBtn\");\r\n  let navIcon = document.querySelector(\"#navIcon\");\r\n  let navPanel = document.querySelector(\"#navPanel\");\r\n  let topBtn = document.querySelector(\"#topBtn\");\r\n\r\n  // GET ALL ELEMENTS WITH CLASS \"observe\"\r\n  let sections = document.querySelectorAll(\".observe\");\r\n\r\n  let animElem = document.querySelectorAll(\".animate\");\r\n\r\n  // HIDE LOADING SCREEN AND REMOVE \"loading\" CLASS FROM BODY\r\n  document.querySelector(\".loadingScreen\").style.opacity = \"0\";\r\n  window.setTimeout(() => {\r\n    loading.classList.remove(\"loading\");\r\n    body.style.overflow = \"auto\";\r\n  }, 500);\r\n\r\n  // SHOW NAVBAR BUTTON\r\n  navBtn.classList.add(\"showNavBtn\");\r\n\r\n  // IF BUTTON \"toTop\" IS CLICKED SCROLL TO TOP\r\n  topBtn.addEventListener(\"click\", () => {\r\n    document.body.scrollTop = 0;\r\n    document.documentElement.scrollTop = 0;\r\n  });\r\n\r\n  // TOGGLE NAVPANEL AND NAVPANEL ICON\r\n  function navToggle() {\r\n    navPanel.classList.toggle(\"showNav\");\r\n    navIcon.classList.toggle(\"hideNavIcon\");\r\n  }\r\n\r\n  document.addEventListener(\"click\", (e) => {\r\n    let clickedElement = e.target; // clicked element\r\n    if (navPanel.classList.contains(\"showNav\")) {\r\n      navToggle();\r\n    } else {\r\n      do {\r\n        if (clickedElement == navBtn) {\r\n          navToggle();\r\n          return;\r\n        }\r\n        // Go up the DOM\r\n        clickedElement = clickedElement.parentNode;\r\n      } while (clickedElement);\r\n    }\r\n  });\r\n\r\n  // ACTIVE NAVBAR LINK - INTERSECTION\r\n  let callback = (entries, observer) => {\r\n    entries.forEach((entry) => {\r\n      // GET INTERSECTED ELEMENTS ID\r\n      if (!entry.target.classList.contains(\"animate\")) {\r\n        let sectionId = entry.target.id;\r\n\r\n        // GET \"navLink\" WITH INTERSECTED ID IN HREF\r\n        let navLink = document.querySelector(\r\n          `#navPanel a[href*=\"${sectionId}\"]`\r\n        );\r\n\r\n        // IF ELEMENT IS INTERSECTING ADD \"active\" CLASS TO \"navLink\" ELEMENT WITH SAME ID IN HREF\r\n        if (entry.isIntersecting) {\r\n          navLink.classList.add(\"active\");\r\n\r\n          // IF INTERSECTED ELEMENT IS NOT \"intro\" SHOW \"toTop\" BUTTON\r\n          if (sectionId != \"intro\") {\r\n            topBtn.classList.add(\"topBtnShow\");\r\n          } else {\r\n            topBtn.classList.remove(\"topBtnShow\");\r\n          }\r\n        } else {\r\n          navLink.classList.remove(\"active\");\r\n        }\r\n      } else {\r\n        if (\r\n          entry.isIntersecting &&\r\n          entry.target.classList.contains(\"animate\")\r\n        ) {\r\n          entry.target.classList.add(\"animation\");\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  let options = {\r\n    root: null,\r\n    rootMargin: \"-50%\",\r\n    threshold: 0,\r\n  };\r\n\r\n  let observer = new IntersectionObserver(callback, options);\r\n\r\n  // OBSERVE ALL ELEMENTS WITH CLASS \"observe\"\r\n  sections.forEach((item) => {\r\n    observer.observe(item);\r\n  });\r\n  animElem.forEach((item) => {\r\n    observer.observe(item);\r\n  });\r\n});\r\n"]}